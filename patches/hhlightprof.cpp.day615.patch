--- cpp/code/hhlightprof.cpp	2020-07-14 12:57:31.000000000 -0700
+++ hhlightprof.cpp	2020-07-14 12:57:28.000000000 -0700
@@ -12,6 +12,12 @@
 #undef HANDMADE_SLOW
 #define HANDMADE_SLOW 0
 
+#if HANDMADE_OSX
+#include <mach/mach.h>
+#include <mach/mach_time.h>
+#include <unistd.h>
+#endif
+
 #include "handmade_platform.h"
 #include "handmade_intrinsics.h"
 #include "handmade_math.h"
@@ -37,7 +43,9 @@
 #include "handmade_lighting.h"
 #include "handmade_config.h"
 
+#if !HANDMADE_OSX
 #include <windows.h>
+#endif
 #include <assert.h>
 #include <stdio.h>
 #include <string.h>
@@ -109,6 +117,46 @@
     return(Result);
 }
 
+#if HANDMADE_OSX
+typedef struct {
+	uint64_t QuadPart;
+} LARGE_INTEGER;
+
+
+void QueryPerformanceCounter(LARGE_INTEGER* Counter)
+{
+	*((uint64_t*)Counter) = mach_absolute_time();
+}
+
+// Dummy function to possibly avoid extra patches
+// while this file is getting changed frequently.
+void QueryPerformanceFrequency(LARGE_INTEGER* Counter)
+{
+	*((uint64_t*)Counter) = 0;
+}
+
+float OSXGetSecondsElapsed(u64 Then, u64 Now)
+{
+	// This can overflow if used for long elapsed times.
+	// Better to use 128-bit arithmetic to do the
+	// calculation.
+	static mach_timebase_info_data_t tb;
+
+	u64 Elapsed = Now - Then;
+
+	if (tb.denom == 0)
+	{
+		// First time we need to get the timebase
+		mach_timebase_info(&tb);
+	}
+
+	u64 Nanos = Elapsed * tb.numer / tb.denom;
+	float Result = (float)Nanos * 1.0E-9;
+
+	return Result;
+}
+#endif
+
 internal void
 ProfileRun(u32 RepeatCount)
 {
@@ -221,7 +269,7 @@
                     lighting_spatial_grid_leaf Leaf = 
                         Solution->SpatialGridLeaves[LeafIndexIndex];
                     f32_4x Valid = (Leaf.BoxMin.x != Leaf.BoxMax.x);
-                    u32 ValidCount = __popcnt(_mm_movemask_ps(Valid.P));
+                    u32 ValidCount = _mm_popcnt_u32(_mm_movemask_ps(Valid.P));
                     BoxCount += ValidCount;
                 }
                 
@@ -246,8 +294,12 @@
         }
         else
         {
+#if HANDMADE_OSX
+			float TotalSeconds = OSXGetSecondsElapsed(StartTime.QuadPart, EndTime.QuadPart);
+#else
             double Diff = (double)(EndTime.QuadPart - StartTime.QuadPart);
             double TotalSeconds = Diff / (double)Freq.QuadPart;
+#endif
             fprintf(stdout, "T:%.0f P:%.0f L:%.0f P/L:%.2f\n",
                     (double)TotalPartitionsTested + (double)TotalLeavesTested,
                     (double)TotalPartitionsTested, (double)TotalLeavesTested,
